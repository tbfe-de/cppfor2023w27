#include <cctype>   // std::toupper
#include <iomanip>  // std::width
                    // std::setfill
#include <iostream> // std::cout
                    // std::endl
class Clock {
private:
    int tenthSeconds_{0};
public:
    Clock() =default; // no arguments C'tor (aka Default C'tor)
    Clock(const Clock&)            =delete; // Copy-C'tor
    Clock(Clock&&)                 =delete; // Move-C'tor
    Clock& operator=(const Clock&) =delete; // Copy-Assign
    Clock& operator=(Clock&&)      =delete; // Move-Assign
    ~Clock() =default;

    auto set(int ts) {
        tenthSeconds_ = ts;
    }
    auto get() const {
        return tenthSeconds_;
    }
    void show() const;
};

void Clock::show() const {
    // Step 1
    // TBD: implement this function to show the value of the
    // data member `tenthSeconds_` in the format m:ss.t with
    //   m = minutes (even if more than 60)
    //   ss = seconds 00 to 59 (ie. leading zero if necessary)
    //   t = tenth of a second
    // if you don't now how to get leading zeros on `std::cout`
    // you may well use `printf`
    // FIY: the clock will later be implemented by various
    // different means, like using a chain of simple `Counter`
    // objects or the `duration`-class from `std::chrono`
    // --- optional part ---
    // instead of `Clock::show()` implement `operator<<` so that
    // the current value of some clock `clk` could be output like
    // that:
    //  std::cout << clk << std::endl;

}

#if 0
// TBD (Step 1 continued)
// enable the mini test-program for the class `Clock` in the
// conditionally compiled section, excluding the ordinary
// `main`-program for the moment

int main()
{
    // TBD (Step 1 continued)
    // create a clock object, set it to various different times,
    // and visually check the output generated by Clock::show()`
    // to the adequate expectation

    // --- optional part ---
    // catch the generated output in an and compile it against an
    // expectation in the program itself so that the final output
    // is something along the lines of
    //  *** ALL TESTS PASSED ***
    // given everything was OK.
}

#else

enum class GameState {
    Initial, Startable,
    WhitePaused, BlackPaused,
    WhiteDraw, BlackDraw,
    WhiteWins, BlackWins
};

void runChessClock()
{
    // Step 2
    // TBD: define two objects of class `Clock`, one for each
    // player (black and white), furthermore a variable for the
    // `GameState` (see enumeration above);
    // initialize that variable with `Gamestate::Initial`;
    char command;
    while (std::cin.get(command)) {
        command = std::tolower(command);
        if (std::islower(command)
         || std::isdigit(command)
         || (command == '?')
         || (command == '.')) {
            // TBD (Step 2 continued): BEFORE each output of the
            // prompt string IN A SEPARATE LINE show the current
            // clock values as produced by `Clock::show`;
            // indicate which player's clock it is by prepending
            // `B:` for the black and `W:` for the white player;
            // if there is an active player add an asterisk after
            // its clock
            std::cout << "===> " << command << std::endl;
            switch(command) {
                // Step 3
                // TBD: as the first statement of each case add a
                // continue if the command is not valid in that
                // state; eg. `c` is solely valid in one of the
                // PAUSED states and should do nothing at all in
                // the other states; at the end of each case as
                // far as necessary assign a new value to the
                // variable holding the `GameState`; in between
                // at the actions to be done when the command is
                // received in that particular state
                case 'r':
                    // (TBD see above in Step 3)
                    break;
                case 's': // start clock (white draws first)
                    // (TBD see above in Step 3)
                    break;
                case 'p': // pause game
                    // (TBD see above in Step 3)
                    break;
                case 'c': // continue game
                    // (TBD see above in Step 3)
                    break;
                case 'x': // toggle player (white <--> black)
                    // (TBD see above in Step 3)
                    break;
                // the following commands are used to advance the
                // clock of the active player (if any) as a
                // deterministic way to test correct behavior
                // before the clocks player clocks are run in
                // a separate thread;
                // NOTE: for the moment please leave this section
                // as it is, its functionality will be implemented
                // later
                case '9': // advance by 108000 ticks (= 3 hours)
                case '8': // advance by 36000 ticks (= 1 hour)
                case '7': // advance by 18000 ticks (= 30 minutes)
                case '6': // advance by 3000 ticks (= 5 minutes)
                case '5': // advance by 600 ticks (= 1 minute)
                case '4': // advance by 150 ticks (= 15 seconds)
                case '3': // advance by 50 ticks (= 5 seconds)
                case '2': // advance by 10 ticks (= 1 second)
                case '1': // advance by 1 tick (= 1/10-th second)
                case '0': // do not advance any player clock, ie.
                          // show the same value as before with
                          // the next prompt
                    break;
                case '?': // command help (available in any state)
                    // TBD (Step 3 continued): print a brief table
                    // with the command letters and a one line
                    // explanation what they are meant to do
                    break;
                case '.': // end command loop program
                    // TBD (Step 3 continued): print a brief table
                    return;
            }
        }
    }
}

int main()
{
    runChessClock();
}
#endif
